// find host by decal number
let DecalNumber = "DECAL_NUMBER_HERE";
let IP_Data = (externaldata (CIDR:string, CIDRASN:int, CIDRASNName:string, CIDRSource:string) ['https://firewalliplists.gypthecat.com/lists/kusto/kusto-cidr-asn.csv.zip'] with (ignoreFirstRecord=true));
let IP_Data2 = external_data(network:string,geoname_id:long,continent_code:string,continent_name:string ,country_iso_code:string,country_name:string,is_anonymous_proxy:bool,is_satellite_provider:bool)
    ['https://raw.githubusercontent.com/datasets/geoip2-ipv4/master/data/geoip2-ipv4.csv'];
DeviceInfo
| where DeviceName contains DecalNumber 
| evaluate ipv4_lookup(IP_Data, PublicIP, CIDR)
| evaluate ipv4_lookup(IP_Data2, PublicIP, network)
| mv-expand parse_json(LoggedOnUsers)
| evaluate bag_unpack(LoggedOnUsers)
| distinct DeviceName, OSPlatform, UserName, DomainName, User_SID = Sid, PublicIP, CIDR, CIDRASNName, Country_Code = country_iso_code, Country_Name = country_name, is_anonymous_proxy

// find host by active user
let ActiveUser = "USERNAME_HERE";
DeviceInfo
| where LoggedOnUsers contains ActiveUser
| extend 
    UserName = extract('"UserName":"([^"]+)"', 1, LoggedOnUsers),
    DomainName = extract('"DomainName":"([^"]+)"', 1, LoggedOnUsers),
    Sid = extract('"Sid":"([^"]+)"', 1, LoggedOnUsers)
| distinct DeviceName, PublicIP, OSPlatform, UserName, DomainName, Sid

// find hostname by public IP address
let IP = "PUBLIC_IP_ADDRESS_HERE";
DeviceInfo
| where PublicIP contains IP
| distinct DeviceName, PublicIP, OSPlatform, LoggedOnUsers

// find hostname by private IP address
let IP = "PRIVATE_IP_ADDRESS_HERE";
DeviceNetworkEvents
| where LocalIP contains IP
| where InitiatingProcessAccountName !in ('system', 'network service', '')
| distinct DeviceName, LocalIP, InitiatingProcessAccountName
